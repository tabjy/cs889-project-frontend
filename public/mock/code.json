{
  "source": "\tpublic Void call() throws Exception\n\t{\t\t\n\t\tPointCostPair pair = optimizer.minimize(\n\t\t costFunction, \n\t\t maxEvaluations, \n\t\t checker, \n\t\t vertexA,\n\t\t vertexB\n\t\t );\n\t\tqueueInX.add(pair.getPoint());\n\t\tterminated = true;\n\t\t// it is the same condition used to say that new x values are available, but now they\n\t\t// are null.\n\t\treturn (Void)null;\n\t}\n",
  "ast": "<unit revision=\"1.0.0\" language=\"Java\" filename=\"test.java\" node-id=\"0\">     <function node-id=\"1\"><type node-id=\"2\"><specifier node-id=\"3 4\" seq-id=\"0\" tokens=\"public\">public</specifier> <name node-id=\"5 6\" seq-id=\"1\" tokens=\"void\">Void</name></type> <name node-id=\"7 8\" seq-id=\"2\" tokens=\"call\">call</name><parameter_list node-id=\"9\">()</parameter_list> <throws node-id=\"10 11\" seq-id=\"3\" tokens=\"throws\">throws <argument node-id=\"12\"><expr node-id=\"13\"><name node-id=\"14 15\" seq-id=\"4\" tokens=\"exception\">Exception</name></expr></argument></throws>\n        <block node-id=\"16\">{<block_content node-id=\"17\">         \n                <decl_stmt node-id=\"18\"><decl node-id=\"19\"><type node-id=\"20\"><name node-id=\"21 22 23 24\" seq-id=\"5 6 7\" tokens=\"point cost pair\">PointCostPair</name></type> <name node-id=\"25 26\" seq-id=\"8\" tokens=\"pair\">pair</name> <init node-id=\"27\">= <expr node-id=\"28\"><call node-id=\"29\"><name node-id=\"30\"><name node-id=\"31 32\" seq-id=\"9\" tokens=\"optimizer\">optimizer</name><operator node-id=\"33\">.</operator><name node-id=\"34 35\" seq-id=\"10\" tokens=\"minimize\">minimize</name></name><argument_list node-id=\"36\">(\n                 <argument node-id=\"37\"><expr node-id=\"38\"><name node-id=\"39 40 41\" seq-id=\"11 12\" tokens=\"cost function\">costFunction</name></expr></argument>, \n                 <argument node-id=\"42\"><expr node-id=\"43\"><name node-id=\"44 45 46\" seq-id=\"13 14\" tokens=\"max evaluations\">maxEvaluations</name></expr></argument>, \n                 <argument node-id=\"47\"><expr node-id=\"48\"><name node-id=\"49 50\" seq-id=\"15\" tokens=\"checker\">checker</name></expr></argument>, \n                 <argument node-id=\"51\"><expr node-id=\"52\"><name node-id=\"53 54 55\" seq-id=\"16 17\" tokens=\"vertex a\">vertexA</name></expr></argument>,\n                 <argument node-id=\"56\"><expr node-id=\"57\"><name node-id=\"58 59 60\" seq-id=\"18 19\" tokens=\"vertex b\">vertexB</name></expr></argument>\n                 )</argument_list></call></expr></init></decl>;</decl_stmt>\n                <expr_stmt node-id=\"61\"><expr node-id=\"62\"><call node-id=\"63\"><name node-id=\"64\"><name node-id=\"65 66 67 68\" seq-id=\"20 21 22\" tokens=\"queue in x\">queueInX</name><operator node-id=\"69\">.</operator><name node-id=\"70 71\" seq-id=\"23\" tokens=\"add\">add</name></name><argument_list node-id=\"72\">(<argument node-id=\"73\"><expr node-id=\"74\"><call node-id=\"75\"><name node-id=\"76\"><name node-id=\"77 78\" seq-id=\"24\" tokens=\"pair\">pair</name><operator node-id=\"79\">.</operator><name node-id=\"80 81 82\" seq-id=\"25 26\" tokens=\"get point\">getPoint</name></name><argument_list node-id=\"83\">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n                <expr_stmt node-id=\"84\"><expr node-id=\"85\"><name node-id=\"86 87\" seq-id=\"27\" tokens=\"terminated\">terminated</name> <operator node-id=\"88\">=</operator> <literal type=\"boolean\" node-id=\"89 90\" seq-id=\"28\" tokens=\"true\">true</literal></expr>;</expr_stmt>\n                <comment type=\"line\" node-id=\"91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108\" seq-id=\"29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\" tokens=\"it is the same condition used to say that new x values are available but now they\">// it is the same condition used to say that new x values are available, but now they</comment>\n                <comment type=\"line\" node-id=\"109 110 111\" seq-id=\"46 47\" tokens=\"are null\">// are null.</comment>\n                <return node-id=\"112 113\" seq-id=\"48\" tokens=\"return\">return <expr node-id=\"114\"><operator node-id=\"115\">(</operator><name node-id=\"116 117\" seq-id=\"49\" tokens=\"void\">Void</name><operator node-id=\"118\">)</operator><literal type=\"null\" node-id=\"119 120\" seq-id=\"50\" tokens=\"null\">null</literal></expr>;</return>\n        </block_content>}</block></function>\n</unit>"
}